# 假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i
# 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。
#
#  请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第
#  j 个人的属性（queue[0] 是排在队列前面的人）。
#
#
#
#
#
#
#  示例 1：
#
#
# 输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
# 输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
# 解释：
# 编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
# 编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
# 编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
# 编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
# 编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
# 编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
# 因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。
#
#
#  示例 2：
#
#
# 输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
# 输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
#
#
#
#
#  提示：
#
#
#  1 <= people.length <= 2000
#  0 <= hi <= 106
#  0 <= ki < people.length
#  题目数据确保队列可以被重建
#
#  Related Topics 贪心 数组 排序
#  👍 917 👎 0

from typing import List
# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        people.sort(key=lambda x: (x[0], -x[1]), reverse=True)
        '''
        先按照'身高'x[0]降序，然后按照x[1]'前面身高大于或等于自身的人'的个数排序
        [[7, 0], [6, 1], [5, 0], [5, 2], [4, 4]]
        '''
        res = []
        '''
        然后依次去取出来，结合前面有多少人，判断应该排在什么位置。
        首先是[7,0]，放在第一位，此时结果[[7,0]]
        然后是[7,1]，因为已经排好序的人，个子肯定比他高，所以他只要放到下标为1的地方就可以，此时结果[[7,0], [7,1]]
        接下来是[6,1]，和上面思路相同，因为已经排好序的人，个子肯定比他高，所以他只要放到下标为1的地方就可以，
        此时结果[[7,0],[6,1], [7,1]]
        依次类推,只要将后面的数字放到下标为x[1]的位置上就可以了
        '''
        for person in people:  #
            res.insert(person[1], person)
        return res
# leetcode submit region end(Prohibit modification and deletion)
solution = Solution()
print(solution.reconstructQueue([[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]))
print(solution.reconstructQueue([[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]))
