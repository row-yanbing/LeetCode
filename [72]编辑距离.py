# Áªô‰Ω†‰∏§‰∏™ÂçïËØç word1 Âíå word2ÔºåËØ∑‰Ω†ËÆ°ÁÆóÂá∫Â∞Ü word1 ËΩ¨Êç¢Êàê word2 ÊâÄ‰ΩøÁî®ÁöÑÊúÄÂ∞ëÊìç‰ΩúÊï∞ „ÄÇ
#
#  ‰Ω†ÂèØ‰ª•ÂØπ‰∏Ä‰∏™ÂçïËØçËøõË°åÂ¶Ç‰∏ã‰∏âÁßçÊìç‰ΩúÔºö
#
#
#  ÊèíÂÖ•‰∏Ä‰∏™Â≠óÁ¨¶
#  Âà†Èô§‰∏Ä‰∏™Â≠óÁ¨¶
#  ÊõøÊç¢‰∏Ä‰∏™Â≠óÁ¨¶
#
#
#
#
#  Á§∫‰æã 1Ôºö
#
#
# ËæìÂÖ•Ôºöword1 = "horse", word2 = "ros"
# ËæìÂá∫Ôºö3
# Ëß£ÈáäÔºö
# horse -> rorse (Â∞Ü 'h' ÊõøÊç¢‰∏∫ 'r')
# rorse -> rose (Âà†Èô§ 'r')
# rose -> ros (Âà†Èô§ 'e')
#
#
#  Á§∫‰æã 2Ôºö
#
#
# ËæìÂÖ•Ôºöword1 = "intention", word2 = "execution"
# ËæìÂá∫Ôºö5
# Ëß£ÈáäÔºö
# intention -> inention (Âà†Èô§ 't')
# inention -> enention (Â∞Ü 'i' ÊõøÊç¢‰∏∫ 'e')
# enention -> exention (Â∞Ü 'n' ÊõøÊç¢‰∏∫ 'x')
# exention -> exection (Â∞Ü 'n' ÊõøÊç¢‰∏∫ 'c')
# exection -> execution (ÊèíÂÖ• 'u')
#
#
#
#
#  ÊèêÁ§∫Ôºö
#
#
#  0 <= word1.length, word2.length <= 500
#  word1 Âíå word2 Áî±Â∞èÂÜôËã±ÊñáÂ≠óÊØçÁªÑÊàê
#
#  Related Topics Â≠óÁ¨¶‰∏≤ Âä®ÊÄÅËßÑÂàí
#  üëç 1649 üëé 0


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        memo = [[0]*(len(word2)+1) for _ in range(len(word1)+1)]
        for j in range(len(word2)):
            memo[0][j] = j
        for j in range(len(word1)):
            memo[j][0] = j
        for i in range(1,len(word1)+1):
            for j in range(1, len(word2)+1):
                if word1[i-1] == word2[j-1]:
                    memo[i][j] = memo[i-1][j-1]
                else:
                    memo[i][j] = min(memo[i][j-1]+1, memo[i-1][j]+1, memo[i-1][j-1]+1)
        return memo[len(word1)][len(word2)]
# leetcode submit region end(Prohibit modification and deletion)


solution = Solution()
print(solution.minDistance("horse", "ros"))
print(solution.minDistance("intention", "execution"))
